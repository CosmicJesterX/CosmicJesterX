# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the "main" branch, `terraform apply` will be executed.
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
#
# To use this workflow, you will need to complete the following setup steps.
# See the documentation for additional details.

name: 'Terraform'

on:
  push:
    branches: [ "main" ]
  pull_request:

permissions:
  contents: read

env:
  # Environment variables for Terraform
  TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless of the OS
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Cache Terraform modules and plugins
    - name: Cache Terraform
      uses: actions/cache@v3
      with:
        path: .terraform
        key: ${{ runner.os }}-terraform-${{ hashFiles('**/*.tf') }}
        restore-keys: |
          ${{ runner.os }}-terraform-

    # Install the latest version of Terraform CLI and configure it with the API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1.3.0
      with:
        cli_config_credentials_token: $TF_API_TOKEN

    # Validate Terraform configuration files
    - name: Terraform Validate
      run: |
        set -e
        terraform validate

    # Initialize a new or existing Terraform working directory
    - name: Terraform Init
      run: |
        set -e
        terraform init

    # Check that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: |
        set -e
        terraform fmt -check

    # Generate an execution plan for Terraform
    - name: Terraform Plan
      run: |
        set -e
        terraform plan -input=false

    # On push to "main", build or change infrastructure according to Terraform configuration files
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        set -e
        terraform apply -auto-approve -input=false
